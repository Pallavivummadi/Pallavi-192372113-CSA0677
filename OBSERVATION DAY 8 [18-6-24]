def coin_change(coins, amount):
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0
    
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] = min(dp[i], dp[i - coin] + 1)
    
    return dp[amount] if dp[amount] != float('inf') else -1

# Example Usage
coins = [1, 2, 5]
amount = 11


def knapsack(weights, values, capacity):
    n = len(values)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]

weights = [2, 3, 4, 5]
values = [3, 4, 5, 6]
capacity = 8

def job_sequencing_with_deadlines(Jobs, n):
    Jobs.sort(key=lambda x: x[2], reverse=True)
    result = [False] * n
    job = [-1] * n
    for i in range(n):
        for j in range(min(n, Jobs[i][1]) - 1, -1, -1):
            if result[j] is False:
                result[j] = True
                job[j] = i
                break
    return job

import heapq

def dijkstra(graph, start):
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0
    queue = [(0, start)]

    while queue:
        current_distance, current_node = heapq.heappop(queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))

    return distances

# Example Usage
graph = {
    'A': {'B': 3, 'C': 4},
    'B': {'A': 3, 'C': 2, 'D': 2},
    'C': {'A': 4, 'B': 2, 'D': 5},
    'D': {'B': 2, 'C': 5}
}

start_node = 'A'
shortest_distances = dijkstra(graph, start_node)


